---
title: "Intro to R<hr>ðŸ“ˆðŸ“‰ðŸ“Š<h3>Data Analysis Workflow</h3>"
author: "Jason Moggridge"
date: "`r Sys.Date()`"
format: 
  revealjs:
    theme: [default, 'custom.scss']
    incremental: true 
    echo: true
editor: source
---

## `R`

-   a high-level, no-boilerplate, interactive language

-   open source

-   statistical features

-   packages for everything

-   great for research

## Typical analysis workflow

<hr>

<br>

<img src="https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png" alt="workflow"/>

## <br><br>

> 80% of data analyst's time is spent cleaning and preparing data

-- Ancient proverb

## Tidyverse

<hr>

A collection of R packages with a shared design philosophy.

::: {#tidyverse .columns}
::: {.column width="40%"}
```{r fig.align='center', fig.width=4, echo=FALSE}
htmltools::img(
  src = "https://tidyverse.tidyverse.org/logo.png",
  alt = "Tidyverse",
  width = "100%",
  fit = 'cover', 
  .noWS = c('before', 'after')
)

```
:::

::: {.column width="55%"}
```{r fig.align='center', fig.width=4, echo=FALSE}
htmltools::img(
  src = "https://camo.githubusercontent.com/8800adfd3928a66d017b1aab28d5479a4f000d38ff4a49299d8417313873efff/68747470733a2f2f692e696d6775722e636f6d2f677965596c6b4c2e706e67",
  alt = "Tidyverse",
  width = '100%',
  fit = 'cover',
  .noWS = c('before', 'after')
)

```
:::
:::

## Basic R code

-   data or 'objects'
-   assign to an 'object' with `<-`
-   use functions to do stuff `function()`

*ðŸ¤– Bob the robot brushes his teeth, then washes his face*

> `Bob <- brush(data = Bob, what = teeth)` `Bob <- wash(data = Bob, what = face)`

## Basic R

don't need arguments (implicit from ordering)

> `Bob <- brush(Bob, teeth)` `Bob <- wash(Bob, face)`

## Pipes: `|>`

<hr>

> ðŸ¤– Bob the robot brushes his teeth, then washes his face

with nesting, we read from inside to outside (unnatural)

```{r eval=FALSE, echo=TRUE}
wash(brush(Bob, what = teeth), what = face)
```

<br>

with pipes, we read left to right (natural)

```{r eval=FALSE, echo=TRUE}
Bob |> brush(what = teeth) |> wash(what = face)
```

-   **\|\> passes data (Bob) as first argument to the next function**

## Tidyverse

```{r}
#| echo: TRUE
#| message: TRUE
library(tidyverse)
```

## Data-driven analysis workflow

<hr>

![](packages.png){fig-align="center" width="667"}

------------------------------------------------------------------------

## Tidy data manifesto

<hr>

<br>

> ***Tidy*** datasets ... have a **specific structure**:\
> 1. each ***variable*** is a **column**,\
> 2. each ***observation*** is a **row**, and\
> 3. each ***type*** of observational unit is a **table**

<br>

**Hadley Wickham** in 'Tidy Data' *J Stat Softw* (2014) <https://www.jstatsoft.org/article/view/v059i10>

## Tidy data...

<hr>

Tidy data is all alike.

`heartdisease` has 10 variables (columns) for 918 patients (rows)

```{r}
#| echo: TRUE
heart_disease <- MLDataR::heartdisease |> 
  as_tibble() |> 
  glimpse()
```

## Transform & Tidy Data

<hr>

-   `dplyr` for table operations
-   `tidyr` to reshape data
-   `stringr` for text and regular expressions
-   `forcats` for factors
-   `lubridate` for datetimes

## Dplyr `select`

Gets a subset of columns from the data.

::: column
```{r}
htmltools::img(src="https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig1.png")
```
:::

<br> <br>

## Dplyr `select`

<br>

Gets a subset of columns from the data.

<br>

```{r}
#| echo: TRUE
# select columns using names
heart_disease |> 
  select(Age, Sex, HeartDisease) |>
  glimpse()
```

<br>

## Dplyr `filter`

<br>

Subsets rows from the data passing a given condition.

<br>

```{r}
heart_disease |> 
  filter(Sex == 'F', Cholesterol > 200) |>    # subset rows
  glimpse()
```

## Dplyr `mutate`

<br>

Creates new column or modifies an existing column given an expression.

<br>

```{r}
heart_disease |> 
  select(Cholesterol) |> 
  mutate(Cholesterol_g = Cholesterol / 1000) |> 
  head()
```

-   Mutate automatically applies the given expression to each row!

## Dplyr `summarise`

<br>

Like mutate, but for expressions that takes a group of values and return a single result.

<br>

```{r}
heart_disease |> 
  summarise(Cholesterol_mean = mean(Cholesterol),
            Cholesterol_sd = sd(Cholesterol))
```

# Hold on to your butts

## dplyr `group-by`

Splits the data so that summarise computes multiple results.

```{r}
heart_disease |> 
  group_by(Sex) |> 
  summarise(Cholesterol_mean = mean(Cholesterol),
            Cholesterol_sd = sd(Cholesterol))
```

## Cheatsheets

<hr>

::: center
```{r}
htmltools::img(
  src="https://raw.githubusercontent.com/rstudio/cheatsheets/main/pngs/data-transformation.png", 
  style = 'float: right;padding-right:150px; width: 900px;')
```
:::

<!-- ## Pipes: `|>` or `%>%` -->

<!-- <hr> -->

<!-- > *Bob brushes his teeth* -->

<!-- <br> -->

<!-- We could put Bob inside `brush()` -->

<!-- > `brush(who = Bob, what = teeth)` -->

<!-- <br> -->

<!-- better - by **piping** Bob into `brush()` -->

<!-- > `Bob |> brush(what = teeth)` -->

## `ggplot2` <br> The layered grammar of graphics

<br>

::: columns
::: {.column width="45%"}
```{r}
#| echo = TRUE
library(ggplot2)
iris |> 
  ggplot(aes(x = Petal.Length, y = Petal.Width, color = Species)) +
  geom_point() +
  geom_smooth()
```
:::

::: {.column width="55%"}
:::
:::

## Model

## Iterate

## Communicate
